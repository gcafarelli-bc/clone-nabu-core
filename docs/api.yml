openapi: 3.0.3
info:
  title: Nabu Gateway
  description: |-
    This is an OpenApi 3.0 specification for Nabu Gateway.
  version: 1.0.0
servers:
  - url: https://api.staging.blockchain.info/nabu-gateway/
paths:
  /brokerage/quote:
    post:
      tags:
        - brokerage
      summary: Create a brokerage quote
      description: Create a brokerage quote for the specified currency pair and profile.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: New brokerage quote request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrokerageQuoteRequest'
      responses:
        '200':
          description: New brokerage quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerageQuote'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                MISSING_PARAM:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 7
                    type: BAD_PARAM_VALUE
                    description: "Bad Parameter Value: Invalid combination of profile and payment method for given currency pair"
  /simple-buy/pairs:
    get:
      tags:
        - simple buy
      summary: Get available currency pairs for the given fiat currency
      description: Get available currency pairs for the given fiat currency.
      parameters:
        - name: fiatCurrency
          in: query
          required: true
          example: EUR
          schema:
            type: string
      responses:
        '200':
          description: List of available currency pairs
          content:
            application/json:
              schema:
                type: object
                properties:
                  pairs:
                    type: object
                    items:
                      $ref: '#/components/schemas/CurrencyPair'
  /simple-buy/eligible:
    get:
      tags:
        - simple buy
      summary: Get simple buy eligibility for the user
      description: Get simple buy eligibility for the user with the given fiat currency
      security:
        - bearerAuth: []
      parameters:
        - name: fiatCurrency
          in: query
          required: false
          example: EUR
          schema:
            type: string
      responses:
        '200':
          description: List of available currency pairs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleBuyEligibility'
  /simple-buy/trades:
    get:
      tags:
        - simple buy
      summary: Get simple buy trades history
      description: Get list of simple buy trades for the user.
      security:
        - bearerAuth: []
      parameters:
        - name: pendingOnly
          in: query
          required: false
          example: false
          description: "When set to true, only the trades in pending states will be returned; otherwise, the trades in the provided *states* query param will be returned or all of them if *states* is not set.<br>
            If empty, true will be used as default value."
          schema:
            type: boolean
        - name: states
          in: query
          required: false
          example: "EXPIRED,FINISHED"
          description: "If populated, and *pendingOnly* is set to false, only the trades in the provided states will be returned.<br>
            Valid states: PENDING_CONFIRMATION, PENDING_DEPOSIT, DEPOSIT_MATCHED, WAITING_FOR_RE, RE_APPROVED, FINISHED, CANCELED, FAILED, EXPIRED, REVERTED"
          schema:
            type: string
        - name: after
          in: query
          required: false
          example: "2024-01-30T16:40:05.529Z"
          description: "If populated, only the trades inserted after the specified timestamp will be returned"
          schema:
            type: string
        - name: before
          in: query
          required: false
          example: "2024-01-30T16:40:05.529Z"
          description: "If populated, only the trades inserted before the specified timestamp will be returned"
          schema:
            type: string
        - name: limit
          in: query
          required: false
          example: 100
          description: "If populated, this is the maximum amount of trades returned.
            If empty, 100 will be used as default value."
          schema:
            type: integer
      responses:
        '200':
          description: List of available currency pairs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleBuyTrade'
  /trades/limits:
    get:
      tags:
        - limits
      summary: Get trade limits
      description: "<b>Deprecated, use /eligible/payment-methods instead. NOTE: deprecation is not official, and the other method cannot be used for ON_CHAIN </b><br><br>Get trade limits for the specified currency and product.<br>"
      security:
        - bearerAuth: []
      parameters:
        - name: minor
          in: query
          required: false
          description: "If true, values will be returned in minor units (e.g. satoshis for BTC).<br>
            If false, values will be returned in major units (e.g. BTC).<br>
            When not set, false will be used as the default value."
          schema:
            type: boolean
        - name: currency
          in: query
          required: false
          description: The fiat currency needed to fetch (or convert if they don't exist) the trade limits for. If not specified, the user country currency will be used.
          example: EUR
          schema:
            type: string
        - name: product
          in: query
          required: false
          description: The product needed to retry the trade limits for. If not specified, SWAP will be used.
          example: SIMPLEBUY
          schema:
            type: string
        - name: networkFee
          in: query
          required: false
          description: The currency needed to calculate the network fee. If not provided, no network fee will be displayed.
          example: BTC
          schema:
            type: string
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TradeLimits'
  /eligible/payment-methods:
    get:
      tags:
        - payment methods
      summary: Get eligible payment methods
      description: Get eligible payment methods for a user within their limits.
      security:
        - bearerAuth: []
      parameters:
        - name: currency
          in: query
          required: false
          description: "If populated, the method will return the payments limits for the specified currency.<br>
            If empty, the user address country will be used to infer the currency. If the address is empty, USD will be used as default value."
          example: EUR
          schema:
            type: string
        - name: eligibleOnly
          in: query
          required: false
          description: "When set to true, only the payment methods with eligible=true will be returned; othewrise, all the payment methods are returend.<br>
            If empty, true will be used as default value."
          example: true
          schema:
            type: boolean
        - name: onlyEligible
          in: query
          required: false
          description: "**Deprecated**<br>
            _Patch for iOS <= iOSVersion_<br>
            It has the same behavior as for eligibleOnly parameter.
            It is ignored if eligibleOnly is set."
          schema:
            type: boolean
        - name: tier
          in: query
          required: false
          description: "If populated, the method will return all the eligible methods for the specified tier.<br>
            If empty, the current user tier will be used.<br>
            0 - no account<br>
            1 - silver: account created<br>
            2 - gold: fully validated user<br>
            3 - silver plus: equivalent to tier 1<br>
            "
          schema:
            type: integer
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
  /payments/methods:
    get:
      tags:
        - payment methods
      summary: "Get available payment methods<br>(TODO check if they are methods that user can potentially use or methods that the use can actually use)"
      description: Get available payment methods for a user. Currently used (as of 10-2023) by iOS and Android.
      security:
        - bearerAuth: []
      parameters:
        - name: currency
          in: query
          required: false
          example: EUR
          schema:
            type: string
        - name: checkEligibility
          in: query
          required: false
          schema:
            type: string
        - name: tier
          in: query
          required: false
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    currency:
                      type: string
                      example: EUR
                    methods:
                      type: array
                      items:
                        $ref: '#/components/schemas/PaymentMethod'
  /payments/banktransfer:
    get:
      tags:
        - payment bank transfer account
      summary: Get avilable bank transfer accounts
      description: Get avilable bank transfer accounts for the user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bank transfer accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BankTransferAccount'
  /payments/card-acquirers:
    get:
      tags:
        - payment card
      summary: Get available payment card acquirers
      description: Get available payment card acquirers for the user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of payment card acquirers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCardAcquirer'
  /payments/cards:
    get:
      tags:
        - payment card
      summary: Get available payment cards
      description: Get available payment cards for the user.
      security:
        - bearerAuth: []
      parameters:
        - name: cardProvider
          in: query
          required: false
          example: true
          schema:
            type: boolean
      responses:
        '200':
          description: List of payment cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCard'
    post:
      tags:
        - payment card
      summary: Link new payment card
      description: Link new payment card for the user. Currently not used (as of 10-2023) by the WebApp.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: New payment card request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardCreation'
      responses:
        '200':
          description: New payment card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                BAD_PARAM_VALUE:
                  description: User not eligible for cards creation
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 7
                    type: BAD_PARAM_VALUE
                    description: Bad Parameter Value
                MAX_PAYMENTS_CARDS:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 101
                    type: BAD_PARAM_VALUE
                    description: Cards limit reached
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                TIER_TOO_LOW:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 98
                    type: FORBIDDEN
                    description: Not authorized for current KYC tier
  /payments/cards/{uid}:
    get:
      tags:
        - payment card
      summary: Get payment card details
      description: Get payment card details.
      security:
        - bearerAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          example: 2f3486b7-13e7-4cf5-9aca-6741d5ae0bb8
          schema:
            type: string
            description: UUID
      responses:
        '200':
          description: Payment card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                BAD_PARAM_VALUE:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 7
                    type: BAD_PARAM_VALUE
                    description: Bad Parameter Value {uid}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                NOT_FOUND:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 2
                    type: NOT_FOUND
                    description: Not Found {uid}
    delete:
      tags:
        - payment card
      summary: Delete an existing payment card
      description: Delete an existing payment card by its id.
      security:
        - bearerAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          example: 2f3486b7-13e7-4cf5-9aca-6741d5ae0bb8
          schema:
            type: string
            description: UUID
      responses:
        '200':
          description: Payment card deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
              example:
                id: 70bde2de-a7a6-4af0-af47-e76a5fadf044
                partner: CARD_CASSY
                address:
                  line1: King's Road
                  line2: ""
                  postCode: SW10
                  city: London
                  state: ""
                  country: UK
                state: BLOCKED
                currency: EUR
                card:
                  number: "4242"
                  expireMonth: 8
                  expireYear: 2025
                  type: VISA
                  label: Fake bank of Blockchain.com
                addedAt: 2023-10-17T14:09:41.593Z
                block: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                BAD_PARAM_VALUE:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 7
                    type: BAD_PARAM_VALUE
                    description: Invalid UUID
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                NOT_FOUND:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 2
                    type: NOT_FOUND
                    description: Not Found {uid}
  /payments/cards/{uid}/activate:
    post:
      tags:
        - payment card
      summary: Activate a payment card
      description: Activate a payment card by its id. Only used by everypay partner (the oldest card provider that we have, but still needed). Currently not used (as of 10-2023) in the WebApp.
      security:
        - bearerAuth: []
      parameters:
        - name: uid
          in: path
          description: Payment card id
          required: true
          example: 0b0199fd-371b-4c93-812e-79108b63e2b9
          schema:
            type: string
            description: UUID
      requestBody:
        required: true
        description: New payment card activation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardActivation'
      responses:
        '200':
          description: FIXME - Complete the example
          content:
            application/json:
              schema:
                type: object
                properties:
                  everypay:
                    type: object
                    properties:
                      apiUsername:
                        type: string
                      mobileToken:
                        type: string
                      paymentLink:
                        type: string
                      paymentState:
                        type: string
                        enum: [INITIAL, WAITING_FOR_3DS_RESPONSE, CONFIRMED_3DS, SETTLED, VOIDED, ABANDONED, FAILED, REFUNDED]
                      paymentReference:
                        type: string
                      orderReference:
                        type: string
                      accountName:
                        type: string
                  cardProvider:
                    type: object
                    properties:
                      cardAcquirerName:
                        type: string
                      cardAcquirerAccountCode:
                        type: string
                      apiUserID:
                        type: string
                      apiToken:
                        type: string
                      paymentLink:
                        type: string
                      paymentState:
                        type: string
                        enum: [INITIAL, WAITING_FOR_3DS_RESPONSE, CONFIRMED_3DS, SETTLED, VOIDED, ABANDONED, FAILED, REFUNDED]
                      paymentReference:
                        type: string
                      orderReference:
                        type: string
                      clientSecret:
                        type: string
                      publishableApiKey:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                BAD_PARAM_VALUE:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 7
                    type: BAD_PARAM_VALUE
                    description: Invalid UUID
  /payments/cards/success-rate:
    get:
      tags:
        - payment card
      summary: Get card success rate
      description: Check the success rate of a card bin. In case of a negative response (block=true), we may don't want to proceed with the card operation.
      security:
        - bearerAuth: []
      parameters:
        - name: bin
          in: query
          description: The first six digits of a payment cards number
          required: true
          example:
            558098
          schema:
            type: string
            description: Must be numeric
      responses:
        '200':
          description: "When block is true the card won't be accepted; if present, the ux field will be populated with the error to display. When false, instead, the card will be accepted: if present, the ux field may contain an error to display, meaning that there is still a relevant chance for the card to not be accepted."
          content:
            application/json:
              schema:
                type: object
                example:
                  block: false
                properties:
                  block:
                    type: boolean
                  ux:
                    $ref: '#/components/schemas/Ux'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                MISSING_PARAM:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 6
                    type: MISSING_PARAM
                    description: Missing 'bin' (Bank Identification Number) from query parameters
                BAD_PARAM_VALUE:
                  value:
                    id: b946f450-562a-49e0-bc68-553bc86f72e5
                    code: 7
                    type: BAD_PARAM_VALUE
                    description: Invalid 'bin' (Bank Identification Number)
  /payments/cassy/tokenize:
    post:
      tags:
        - payment cassy
      summary: Create new card token
      description: Create new card token right before linking a card. It is used for the card creation flow in cassy.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Card token id
          content:
            application/json:
              schema:
                type: object
                properties:
                  card_token_id:
                    type: string
                    description: The card token id
                    example: 0b597387-c2b5-4060-ad57-4ed99a11e54e
                  vgs_vault_id:
                    type: string
                    description: The id of the vault where the actual card data are stored.
                    example: tnt992k29sv
  /payments/cassy/charge/cvv:
    post:
      tags:
        - payment cassy
      summary: Provide the card CVV
      description: Provide the card CVV as requested by the acquirer during a payment.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentId:
                  type: string
                  description: The id of the payment that is being processed
                  example: 0b0199fd-371b-4c93-812e-79108b63e2b9
                cvv:
                  type: string
                  description: The 3/4 digits that are behind the card
                  example: 123
      responses:
        '204':
          description: No content
components:
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: King's Road
        line2:
          type: string
          example: ""
        postCode:
          type: string
          example: SW10
        city:
          type: string
          example: London
        state:
          type: string
          example: ""
        country:
          type: string
          example: UK
    BankingInfoCapability:
      type: object
      properties:
        enabled:
          type: boolean
        ux:
          $ref: '#/components/schemas/Ux'
    BankingInfoCapabilities:
      type: object
      properties:
        deposit:
          $ref: '#/components/schemas/BankingInfoCapability'
        withdrawal:
          $ref: '#/components/schemas/BankingInfoCapability'
    BankTransferAccount:
      type: object
      properties:
        id:
          type: string
          description: UUID
          example: 09bbafac-9218-4f26-a2bc-96a95e79b73c
        partner:
          $ref: '#/components/schemas/PaymentPartner'
        state:
          $ref: '#/components/schemas/UserPaymentAccountState'
        currency:
          type: string
          example: EUR
        details:
          type: object
        error:
          type: string
        attributes:
          type: object
        addedAt:
          type: string
          description: UTC date in string format
          example: 2023-10-15T11:00:08.743Z
        capabilities:
          $ref: '#/components/schemas/BankingInfoCapabilities'
    BrokerageQuote:
      type: object
      properties:
        quoteId:
          type: string
          description: UUID
          example: 09bbafac-9218-4f26-a2bc-96a95e79b73c
        quoteMarginPercent:
          type: number
          format: float
          description: The margin percentage for the brokerage fee
          example: 0.5
        quoteCreatedAt:
          type: string
          description: UTC date in string format
          example: 2023-10-15T11:00:08.743Z
        quoteExpiresAt:
          type: string
          description: UTC date in string format
          example: 2023-10-15T11:00:08.743Z
        price:
          type: string
          description: The string representation of an integer number
          example: "2474"
        resultAmount:
          type: string
          description: The string representation of an integer number
          example: "36523"
        networkFee:
          type: string
          description: The string representation of an integer number
          example: "0"
        staticFee:
          type: string
          description: The string representation of an integer number
          example: "0"
        feeDetails:
            type: object
            description: The fee in details
            properties:
              feeWithoutPromo:
                type: string
                description: The string representation of an integer number
                example: "24"
              fee:
                type: string
                description: The string representation of an integer number. This is the dynamic fee.
                example: "24"
              feeFlags:
                type: array
                items:
                  type: string
                example: []
        settlementDetails:
          type: object
          description: The settlement details
          properties:
            availability:
              type: string
              enum: [REGULAR, INSTANT]
              example: REGULAR
        sampleDepositAddress:
          type: string
          description: This is populated for SWAP_ON_CHAIN and SWAP_FROM_USERKEY profiles.
          example: "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2"
    BrokerageQuoteRequest:
      type: object
      properties:
        pair:
          type: string
          example: "BTC-EUR"
        profile:
          type: string
          example: SIMPLEBUY
        inputValue:
          type: string
          description: String representation of an integer number
          example: "1500"
        paymentMethod:
          type: string
          example: FUNDS
    CardDetail:
      type: object
      properties:
        number:
          type: string
          example: 4242
        expireMonth:
          type: integer
          example: 12
        expireYear:
          type: integer
          example: 28
        type:
          $ref: '#/components/schemas/CardType'
        label:
          type: string
          example: Fake bank
    CardType:
      type: string
      enum: [VISA, MASTERCARD, DISCOVER, AMEX, UNKNOWN]
      example: VISA
    Currency:
      type: object
      example: EUR
      properties:
        name:
          type: string
          description: The ticker
          example: ETH
        longName:
          type: string
          description: Full name
          example: Ethereum
        precision:
          type: integer
          description: The precision supported
        type:
          type: string
          enum: [FIAT, COIN, ERC20, CELO_TOKEN]
          example: COIN
        chainPrecision:
          type: integer
          description: The true precision of a currency (18 for ETH, 2 for USD, 0 for JPY ...)
          example: 18
        displayName:
          type: string
          description: The ticker symbol to be displayed
          example: ETH
        childSymbol:
          type: string
        parentSymbol:
          type: string
    CurrencyPair:
      type: object
      properties:
        pair:
          type: string
          description: The currency pair
          example: BTC-EUR
        buyMin:
          type: string
          example: "500"
        buyMax:
          type: string
          example: "500"
        sellMin:
          type: string
          example: "49000000"
        sellMax:
          type: string
          example: "49000000"
    Error:
      type: object
      properties:
        id:
          type: string
          description: UUID of the error
          example: b946f450-562a-49e0-bc68-553bc86f72e5
        code:
          type: integer
          description: The error response code
          example: 6
        type:
          type: string
          description: The error response type
          example: MISSING_PARAM
        description:
          type: string
          description: The error response message
          example: Missing Parameter %s
        ux:
          $ref: '#/components/schemas/Ux'
    MobilePaymentType:
      type: string
      enum:  [GOOGLE_PAY, APPLE_PAY, UNKNOWN]
      example: GOOGLE_PAY
    CardCapabilities:
      type: object
      properties:
        deposit:
          $ref: '#/components/schemas/CardCapability'
        brokerage:
          $ref: '#/components/schemas/CardCapability'
        withdrawal:
          $ref: '#/components/schemas/CardCapability'
    CardCapability:
      type: object
      properties:
        enabled:
          type: boolean
        instant:
          type: boolean
        settlementTime:
          type: string
          description: The settlement time in ISO-8601
        settlementType:
          type: string
          enum: [AVERAGE, MAX]
          description: Type of settlementTime (amount given is Maximum or Average)
    PaymentCard:
      type: object
      example:
        id: 70bde2de-a7a6-4af0-af47-e76a5fadf044
        partner: CARD_CASSY
        address:
          line1: King's Road
          line2: ""
          postCode: SW10
          city: London
          state: ""
          country: UK
        state: ACTIVE
        currency: EUR
        card:
          number: "4242"
          expireMonth: 8
          expireYear: 2025
          type: VISA
          label: Fake bank of Blockchain.com
        addedAt: 2023-10-17T14:09:41.593Z
      properties:
        id:
          type: string
          description: UUID
          example: fa096952-296a-4514-8c4c-55a57bc79b45
        partner:
          $ref: '#/components/schemas/PaymentPartner'
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
          example: username@blockchain.com
        state:
          $ref: '#/components/schemas/UserPaymentAccountState'
        currency:
          type: string
          example: GBP
        card:
          $ref: '#/components/schemas/CardDetail'
        addedAt:
          type: string
          description: UTC date in string format
          example: 2023-10-16T15:05:17.477Z
        lastError:
          type: string
        ux:
          $ref: '#/components/schemas/Ux'
        mobilePaymentType:
          $ref: '#/components/schemas/MobilePaymentType'
        block:
          type: boolean
        capabilities:
          $ref: '#/components/schemas/CardCapabilities'
    PaymentCardAcquirer:
      type: object
      properties:
        cardAcquirerName:
          type: string
        cardAcquirerAccountCodes:
          type: array
          items:
            type: string
        apiKey:
          type: string
    PaymentCardActivation:
      type: object
      properties:
        everypay:
          type: object
          properties:
            customerUrl:
              type: string
            shouldEnableAccountCurrency:
              type: boolean
        redirectURL:
          type: string
        accountCurrencyEnabled:
          type: boolean
        useOnlyAlreadyValidatedCardRef:
          type: boolean
        cvv:
          type: string
    PaymentCardCreation:
      type: object
      properties:
        currency:
          type: string
          description: FIXME - Check why the currency is needed here
          example: EUR
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
          example: username@blockchain.com
        paymentMethodTokens:
          type: object
          description: Used for card provider (old) not for Cassy (new). For the new system check if this can be removed
          properties:
            key:
              description: FIXME - proper document this @Ludo
            value:
              description: FIXME - proper document this @Ludo
    PaymentMethod:
      type: object
      example:
        eligible: true
        type: PAYMENT_CARD
        limits:
          min: "100"
          max: "500000"
        currency: EUR
        subTypes: [VISA, MASTERCARD]
        visible: true
        mobilePayment: [GOOGLE_PAY, APPLE_PAY]
        cardFundSources: [PREPAID, CREDIT, DEBIT]
      properties:
        eligible:
          type: boolean
        ineligibilityReason:
          type: string
          enum: [TIER_TOO_LOW, INVALID_USER, INVALID_ADDRESS, LIMIT_DOES_NOT_EXIST, UNSUPPORTED_CURRENCY, UNSUPPORTED_REGION, UNSUPPORTED_COUNTRY_OR_STATE, UNSUPPORTED_IP_REGION, DOCUMENT_NOT_FOUND, DOCUMENT_NOT_FROM_UK, DOCUMENT_NOT_FROM_TR, DISABLED_FOR_USER, RISK_SCORE_ABOVE_THRESHOLD, OTHER]
          description: Populated only when eligible is false
          example: null
        type:
          type: string
          enum: [BANK_ACCOUNT, PAYMENT_CARD, FUNDS, BANK_TRANSFER]
          example: PAYMENT_CARD
        limits:
          type: object
          example:
            min: "100"
            max: "500000"
          properties:
            min:
              type: string
              example: 100
            max:
              type: string
              example: 5000000
            daily:
              $ref: '#/components/schemas/TradingLimit'
            weekly:
              $ref: '#/components/schemas/TradingLimit'
            annual:
              $ref: '#/components/schemas/TradingLimit'
        currency:
          type: string
          example: EUR
        subTypes:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/CardType'
        visible:
          type: boolean
        mobilePayment:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/MobilePaymentType'
        cardFundSources:
          type: array
          items:
            type: string
            enum: [DEBIT, PREPAID, CREDIT, UNKNOWN]
            example: [PREPAID, CREDIT, DEBIT]
        capabilities:
          type: array
          items:
            type: string
            enum: [DEPOSIT, WITHDRAWAL, BROKERAGE]
          example: null
    PaymentPartner:
      type: string
      enum: [NONE,TEST,BLOCKCHAIN,LHV,HWS,SILVERGATE,MODULR,UPT,EVERYPAY,CONTACT, SIGNATURE, YODLEE, YAPILY, CARDPROVIDER, PLAID, BIND, CHECKOUTDOTCOM_ACH, CROSSRIVER, CARD_CASSY, BAKKT]
      example: CARD_CASSY
    SimpleBuyEligibility:
      type: object
      properties:
        eligible:
          type: boolean
        simpleBuyTradingEligible:
          type: boolean
        simpleBuyPendingTradesEligible:
          type: boolean
        pendingDepositSimpleBuyTrades:
          type: number
          example: 0
        pendingConfirmationSimpleBuyTrades:
          type: number
          example: 0
        maxPendingDepositSimpleBuyTrades:
          type: number
          example: 4
        maxPendingConfirmationSimpleBuyTrades:
          type: number
          example: 20
    SimpleBuyTrade:
      type: object
      properties:
        id:
          type: string
          example: "d2889c59-c4fb-44e4-a58d-4bbfed102180"
        pair:
          type: string
          example: "BTC-EUR"
        state:
          type: string
          enum: [CREATING,INITIATING_ORDER,CONFIRMING_ORDER,FUNDING_ORDER,RESERVING_FUND,EXECUTING_ORDER,CAPTURING,REFUNDING,ACCOUNTING,WITHDRAWING,REFUNDING_WITHDRAWAL_ERROR,CREATING_RECURRING_ORDER,FINISHED,FAILED,EXPIRED,ACCOUNTING_FUND_AFTER_ERROR]
          example: "FINISHED"
        inputCurrency:
          type: string
          example: "EUR"
        inputQuantity:
          type: string
          example: "10000"
        outputCurrency:
          type: string
          example: "EUR"
        outputQuantity:
          type: string
          example: "288005"
        insertedAt:
          type: string
          example: "2024-01-30T16:40:05.529Z"
        updatedAt:
          type: string
          example: "2024-01-30T16:40:07.424Z"
        expiresAt:
          type: string
          example: "2024-01-30T16:40:05.529Z"
        price:
          type: string
          example: "3455141"
        fee:
          type: string
          example: "49"
        feeDetails:
          type: object
          properties:
            feeWithoutPromo:
              type: string
              example: "49"
            fee:
              type: string
              example: "49"
            feeFlags:
              type: array
              example: []
              items:
                type: string
        paymentType:
          type: string
          example: "FUNDS"
        side:
          type: string
          example: "BUY"
        product:
          type: string
          example: "SIMPLEBUY"
    TradeLimits:
      type: object
      required:
        - currency
        - minOrder
        - maxOrder
        - maxPossibleOrder
      properties:
        currency:
          type: string
          example: EUR
        minOrder:
          type: string
          description: "String representation of a float number.<br>This is the minimum amount available for a single order."
          example: "5.00"
        maxOrder:
          type: string
          description: "String representation of a float number.<br>This is the maximum amount available for a single order."
          example: "49000.00"
        daily:
          type: string
          description: "String representation of a float number.<br>This is the maximum amount available for the day.<br>
            It is deprecated and it will be removed soon."
          example: "149000.00"
        weekly:
          type: string
          description: "String representation of a float number.<br>This is the maximum amount available for the week.<br>
            It is deprecated and it will be removed soon."
          example: "149000.00"
        annual:
          type: string
          description: "String representation of a float number.<br>This is the maximum amount available for the year.<br>
            It is deprecated and it will be removed soon."
          example: "149000.00"
        maxPossibleOrder:
          type: string
          description: "String representation of a float number.<br>This is the actual max possible amount considering the 
            all the previous limits (daily, weekly and annual).<br>
            It is deprecated and it will be removed soon."
          example: "49000.00"
        networkFee:
          type: string
          description: String representation of a float number
          example: "0.0001234"
    TradingLimit:
      type: object
      properties:
        limit:
          type: number
          format: int64
          example: 10
        available:
          type: number
          format: int64
          example: 8
        used:
          type: number
          format: int64
          example: 2
    UserPaymentAccountState:
      type: string
      enum: [PENDING, ACTIVE, BLOCKED, EXPIRED, REQUIRES_UPDATE]
      example: ACTIVE
    Ux:
      type: object
      description: Additional details with localized title and message that can be diplayed and used for the UX
      properties:
        id:
          type: string
          example:
        title:
          type: string
          example: Oops, something went wrong
        message:
          type: string
          example: Please try again
        icon:
          type: object
          example: null
          properties:
            url:
              type: string
            status:
              type: object
              properties:
                url:
                  type: string
            accessibility:
              type: object
              properties:
                description:
                  type: string
        actions:
          type: array
          example: []
          items:
            type: object
            properties:
              title:
                type: string
              type:
                type: string
              url:
                type: string
        categories:
          type: array
          example: []
          items:
            type: string